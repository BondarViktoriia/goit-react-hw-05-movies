{"version":3,"file":"static/js/558.c75a0f62.chunk.js","mappings":"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","sources":["components/TrendingMovies/TrendingMovies.styled.js","components/TrendingMovies/TrendingMovies.js","components/services/Api.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.js","pages/Movie/Movie.styled.js","pages/Movie/Movie.js"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const TrendingMoviesList = styled.ul`\ndisplay: flex;\n    flex-wrap: wrap;\n    gap: 16px;\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n    justify-content: center;\n\n`\nexport const TrendingMoviesItem = styled.li`\nflex-basis: calc((100% - 60px) / 4);\n    width: 320px;\n    height:480px;\n    border-radius: 10px;\n    transition-property: box-shadow, transform;\n    transition-duration: 200ms;\n    transition-timing-function: cubic-bezier(0.075, 0.82,  0.165, 1);\n   background: rgb(255,0,44);\nbackground: linear-gradient(90deg, rgba(255,0,44,1) 11%, rgba(2,0,36,1) 99%);\n\n    `\nexport const TrendingMoviesImg = styled.img`\n  width:100%;\n    height: 398px;\n    object-fit: cover;\n    border-radius: 5px;\n`\nexport const TrendingMoviesText = styled.p`\nmargin: 0;\npadding:10px;\nfont-weight:bold;\ntext-decoration:none;\n\n`\nexport const TrendingMoviesData = styled.p`\nmargin:0;\nfont-weight:bold;\ntext-decoration:none;\npadding:0px 10px 0px 10px;\n`\nexport const TrendingLink = styled(NavLink)`\ntext-decoration:none;\ncolor:black\n`\n","import {\n  TrendingMoviesList,\n  TrendingLink,\n  TrendingMoviesItem,\n  TrendingMoviesImg,\n  TrendingMoviesText,\n  TrendingMoviesData\n} from './TrendingMovies.styled';\nimport PropTypes from 'prop-types';\nimport imageNotFound from '../../images/notfound.png';\n\nconst TrendingMovies = ({ movies,location }) => {\n  return (\n    <>\n      <TrendingMoviesList>\n        {movies.map(({ id, posterPath, title, releaseDate }) => (\n          <TrendingLink to={`/movies/${id}`} state={{ from: location }}>\n            <TrendingMoviesItem key={id}>\n              <TrendingMoviesImg\n                 src={\n                  posterPath \n                    ? `https://image.tmdb.org/t/p/w500/${posterPath}`\n                    : imageNotFound\n                }\n            \n                alt={title}\n                width=\"320\"\n              />\n\n              <TrendingMoviesText>{title}</TrendingMoviesText>\n              <TrendingMoviesData>\n                {releaseDate ? new Date(releaseDate).getFullYear() : '---'}\n              </TrendingMoviesData>\n            </TrendingMoviesItem>\n          </TrendingLink>\n        ))}\n      </TrendingMoviesList>\n    </>\n  );\n};\n\nTrendingMovies.propTypes = {\n  trending:PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    posterPath: PropTypes.string.isRequired,\n    releaseDate: PropTypes.string.isRequired,\n    title:PropTypes.string.isRequired,\n  }),),\n  location:PropTypes.object.isRequired,\n\n}\n\nexport default TrendingMovies;\n","// https://api.themoviedb.org/3/movie/550?api_key=9384544c410021c8ddd99f4e7b3ff84b\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '9384544c410021c8ddd99f4e7b3ff84b';\nconst TRENGING_MOVIES = '/trending/movie/day';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios(TRENGING_MOVIES, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  const moviesMaper = movies => {\n    return movies.map(\n      ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n        id,\n        title,\n        posterPath,\n        releaseDate,\n      })\n    );\n  };\n  return moviesMaper(data.results);\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const {\n    title,\n    poster_path: posterPath,\n    release_date: releaseDate,\n    genres,\n    overview,\n    vote_average: voteAverage,\n  } = data;\n  return { title, posterPath, releaseDate, genres, overview, voteAverage };\n};\n\nexport const getCast = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const actorsMaper = actors => {\n    return actors.map(({ id, name, profile_path: profilePath, character }) => ({\n      id,\n      name,\n      profilePath,\n      character,\n    }));\n  };\n  return actorsMaper(data.cast);\n};\n\nexport const getReviews = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const reviewsMaper = reviews => {\n    return reviews.map(({ id, author, content }) => ({ id, author, content }));\n  };\n  return reviewsMaper(data.results);\n};\n\nexport const getMovies = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n      page: 1,\n      include_adult: false,\n    },\n  });\n  const moviesMaper = movies => {\n    return movies.map(\n      ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n        id,\n        title,\n        posterPath,\n        releaseDate,\n      })\n    );\n  };\n  return moviesMaper(data.results);\n};\n","import styled from \"styled-components\";\n\nexport const Form = styled.form`\n    display: flex;\n    gap: 20px;\n    justify-content: center;\n    margin-bottom: 16px;\n`\nexport const Input = styled.input`\n    padding: 10px;\n    width: 500px;\n    height: 26px;\n    font-weight: 700;\n \n\n`\nexport const SearchButton = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n    border: none;\n    padding-left: 20px;\n    padding-right: 20px;\n      background: rgb(255,0,44);\n    background: linear-gradient( 90deg, rgba(255,0,44,1) 11%, rgba(2,0,36,1) 99% );\n    border-radius: 4px;\n    font-weight: 600;\n    cursor: pointer;\n    color:white;\n    text-transform: uppercase;\n`","import PropTypes from 'prop-types';\nimport {Form,Input,SearchButton } from './SearchForm.styled'\n\nconst SearchForm = ({ onSubmit, value }) => {\n    \n  const handleSubmit = e => {\n    e.preventDefault();\n     const form = e.target;\n    onSubmit(form.elements.query.value);\n    form.reset();\n  };\n\n    return (\n           <>\n      <Form onSubmit={handleSubmit}>\n        <Input type=\"text\" name=\"query\" defaultValue={value}/>\n        <SearchButton type=\"submit\">Search</SearchButton>\n      </Form>\n      \n    </>\n    )\n}\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\n\nexport default SearchForm;","import styled from 'styled-components';\n\nexport const MovieTitle = styled.h1`\n  font-size: 30px;\n  font-weight: bold;\n  text-align: center;\n  text-transform: uppercase;\n  margin: 0;\n  padding: 15px;\n`;\n","import SearchForm from 'components/SearchForm/SearchForm';\nimport { getMovies } from 'components/services/Api';\nimport TrendingMovies from 'components/TrendingMovies/TrendingMovies';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { MovieTitle } from './Movie.styled';\n\nconst Movie = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n  const location = useLocation();\n  useEffect(() => {\n    if (!searchQuery) {\n      setSearchMovies([]);\n      return;\n    }\n    if (searchQuery.trim() === '' || searchQuery === '') {\n      alert('Enter valid word');\n      return;\n    }\n    getMovies(searchQuery.toLowerCase().trim())\n      .then(movies => {\n        setSearchMovies(movies);\n        if (movies.length === 0) {\n          alert('There are no movies for this search');\n        }\n        setError(null);\n      })\n      .catch(error => {\n        console.log(error.message);\n        setSearchMovies([]);\n        setError(error);\n      });\n  }, [searchQuery]);\n\n  const onSubmit = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  return (\n    <main>\n      <section>\n        <MovieTitle>Search movies</MovieTitle>\n        <SearchForm onSubmit={onSubmit} value={searchQuery} />\n        {searchMovies?.length > 0 && (\n          <TrendingMovies movies={searchMovies} location={location} />\n        )}\n      </section>\n    </main>\n  );\n};\n\nexport default Movie;\n"],"names":["TrendingMoviesList","styled","TrendingMoviesItem","TrendingMoviesImg","TrendingMoviesText","TrendingMoviesData","TrendingLink","NavLink","movies","location","map","id","posterPath","title","releaseDate","to","state","from","src","imageNotFound","alt","width","Date","getFullYear","axios","API_KEY","getTrendingMovies","params","api_key","data","moviesMaper","poster_path","release_date","results","getMovieById","movieId","language","genres","overview","voteAverage","vote_average","getCast","actorsMaper","actors","name","profilePath","profile_path","character","cast","getReviews","reviewsMaper","reviews","author","content","getMovies","query","page","include_adult","Form","Input","SearchButton","onSubmit","value","e","preventDefault","form","target","elements","reset","type","defaultValue","MovieTitle","useState","searchMovies","setSearchMovies","setError","useSearchParams","searchParams","setSearchParams","searchQuery","get","useLocation","useEffect","trim","toLowerCase","then","length","alert","catch","error","console","log","message","TrendingMovies"],"sourceRoot":""}