{"version":3,"file":"static/js/806.761cf9c4.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","components/services/Api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsList = styled.ul`\ndisplay: flex;\n    flex-direction: column;\n    gap:15px;\n    list-style: none;\n`\nexport const ReviewsItem = styled.li`\n  box-shadow: rgb(0 0 0 / 12%) 0px 1px 3px, rgb(0 0 0 / 14%) 0px 1px 1px,\n    rgb(0 0 0 / 20%) 0px 2px 1px;\n  border-radius: 6px;\n\n`\nexport const AutorName = styled.p`\n  text-transform: uppercase;\n  font-size: 20px;\n  font-weight: bold;\n`\n\nexport const ReviewText = styled.p`\nfont-size: 20px;\n`\nexport const NoReview = styled.p`\n  text-transform: uppercase;\n  font-size: 40px;\n  font-weight: bold;\n  margin-bottom: 50px;\n`","import { getReviews } from 'components/services/Api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  AutorName,\n  ReviewText,\n  NoReview,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getReviews(movieId)\n      .then(reviews => {\n        setReviews(reviews);\n        setError(null);\n      })\n      .catch(error => {\n        setError(error);\n        setReviews([]);\n      });\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n  return (\n    <div>\n      <ReviewsList>\n        {reviews.map(({ id, author, content }) => (\n          <ReviewsItem key={id}>\n            <AutorName> Author : {author} </AutorName>\n            <ReviewText> Review : {content} </ReviewText>\n          </ReviewsItem>\n        ))}\n      </ReviewsList>\n      {reviews.length === 0 && !error && (\n        <NoReview>We don't have any reviews for this movie</NoReview>\n      )}\n    </div>\n  );\n};\nexport default Reviews;\n","// https://api.themoviedb.org/3/movie/550?api_key=9384544c410021c8ddd99f4e7b3ff84b\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '9384544c410021c8ddd99f4e7b3ff84b';\nconst TRENGING_MOVIES = '/trending/movie/day';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios(TRENGING_MOVIES, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  const moviesMaper = movies => {\n    return movies.map(\n      ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n        id,\n        title,\n        posterPath,\n        releaseDate,\n      })\n    );\n  };\n  return moviesMaper(data.results);\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const {\n    title,\n    poster_path: posterPath,\n    release_date: releaseDate,\n    genres,\n    overview,\n    vote_average: voteAverage,\n  } = data;\n  return { title, posterPath, releaseDate, genres, overview, voteAverage };\n};\n\nexport const getCast = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const actorsMaper = actors => {\n    return actors.map(({ id, name, profile_path: profilePath, character }) => ({\n      id,\n      name,\n      profilePath,\n      character,\n    }));\n  };\n  return actorsMaper(data.cast);\n};\n\nexport const getReviews = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  const reviewsMaper = reviews => {\n    return reviews.map(({ id, author, content }) => ({ id, author, content }));\n  };\n  return reviewsMaper(data.results);\n};\n\nexport const getMovies = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n      page: 1,\n      include_adult: false,\n    },\n  });\n  const moviesMaper = movies => {\n    return movies.map(\n      ({ id, title, poster_path: posterPath, release_date: releaseDate }) => ({\n        id,\n        title,\n        posterPath,\n        releaseDate,\n      })\n    );\n  };\n  return moviesMaper(data.results);\n};\n"],"names":["ReviewsList","styled","ReviewsItem","AutorName","ReviewText","NoReview","useState","reviews","setReviews","movieId","useParams","error","setError","useEffect","getReviews","then","catch","map","id","author","content","length","axios","API_KEY","getTrendingMovies","params","api_key","data","moviesMaper","movies","title","posterPath","poster_path","releaseDate","release_date","results","getMovieById","language","genres","overview","voteAverage","vote_average","getCast","actorsMaper","actors","name","profilePath","profile_path","character","cast","reviewsMaper","getMovies","query","page","include_adult"],"sourceRoot":""}